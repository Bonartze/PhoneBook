// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telephone_book.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telephone_5fbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telephone_5fbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telephone_5fbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telephone_5fbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telephone_5fbook_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_telephone_5fbook_2eproto_metadata_getter(int index);
class Author;
struct AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class Book;
struct BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class Date;
struct DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class Library;
struct LibraryDefaultTypeInternal;
extern LibraryDefaultTypeInternal _Library_default_instance_;
class Publishing;
struct PublishingDefaultTypeInternal;
extern PublishingDefaultTypeInternal _Publishing_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Author* Arena::CreateMaybeMessage<::Author>(Arena*);
template<> ::Book* Arena::CreateMaybeMessage<::Book>(Arena*);
template<> ::Date* Arena::CreateMaybeMessage<::Date>(Arena*);
template<> ::Library* Arena::CreateMaybeMessage<::Library>(Arena*);
template<> ::Publishing* Arena::CreateMaybeMessage<::Publishing>(Arena*);
template<> ::User* Arena::CreateMaybeMessage<::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Author PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  virtual ~Author();
  explicit constexpr Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Author* New() const final {
    return CreateMaybeMessage<Author>(nullptr);
  }

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Author& from);
  void MergeFrom(const Author& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Author* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Author";
  }
  protected:
  explicit Author(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telephone_5fbook_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kBirthYearFieldNumber = 3,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 2;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // uint32 birth_year = 3;
  void clear_birth_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 birth_year() const;
  void set_birth_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_birth_year() const;
  void _internal_set_birth_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 birth_year_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telephone_5fbook_2eproto;
};
// -------------------------------------------------------------------

class Publishing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Publishing) */ {
 public:
  inline Publishing() : Publishing(nullptr) {}
  virtual ~Publishing();
  explicit constexpr Publishing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Publishing(const Publishing& from);
  Publishing(Publishing&& from) noexcept
    : Publishing() {
    *this = ::std::move(from);
  }

  inline Publishing& operator=(const Publishing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publishing& operator=(Publishing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Publishing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publishing* internal_default_instance() {
    return reinterpret_cast<const Publishing*>(
               &_Publishing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Publishing& a, Publishing& b) {
    a.Swap(&b);
  }
  inline void Swap(Publishing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publishing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Publishing* New() const final {
    return CreateMaybeMessage<Publishing>(nullptr);
  }

  Publishing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Publishing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Publishing& from);
  void MergeFrom(const Publishing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publishing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Publishing";
  }
  protected:
  explicit Publishing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telephone_5fbook_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:Publishing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telephone_5fbook_2eproto;
};
// -------------------------------------------------------------------

class Date PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  virtual ~Date();
  explicit constexpr Date(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Date& default_instance() {
    return *internal_default_instance();
  }
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Date* New() const final {
    return CreateMaybeMessage<Date>(nullptr);
  }

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telephone_5fbook_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // uint32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::uint32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  ::PROTOBUF_NAMESPACE_ID::uint32 month_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telephone_5fbook_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telephone_5fbook_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRegistrationDateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Date registration_date = 3;
  bool has_registration_date() const;
  private:
  bool _internal_has_registration_date() const;
  public:
  void clear_registration_date();
  const ::Date& registration_date() const;
  ::Date* release_registration_date();
  ::Date* mutable_registration_date();
  void set_allocated_registration_date(::Date* registration_date);
  private:
  const ::Date& _internal_registration_date() const;
  ::Date* _internal_mutable_registration_date();
  public:
  void unsafe_arena_set_allocated_registration_date(
      ::Date* registration_date);
  ::Date* unsafe_arena_release_registration_date();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Date* registration_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telephone_5fbook_2eproto;
};
// -------------------------------------------------------------------

class Book PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  virtual ~Book();
  explicit constexpr Book(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Book& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Book* New() const final {
    return CreateMaybeMessage<Book>(nullptr);
  }

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Book& from);
  void MergeFrom(const Book& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Book";
  }
  protected:
  explicit Book(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telephone_5fbook_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorsFieldNumber = 2,
    kHolderFieldNumber = 7,
    kNameFieldNumber = 4,
    kPublishingFieldNumber = 1,
    kBorrowDateFieldNumber = 5,
    kReturnDateFieldNumber = 6,
    kYearFieldNumber = 3,
  };
  // repeated string authors = 2;
  int authors_size() const;
  private:
  int _internal_authors_size() const;
  public:
  void clear_authors();
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();
  private:
  const std::string& _internal_authors(int index) const;
  std::string* _internal_add_authors();
  public:

  // repeated uint32 holder = 7;
  int holder_size() const;
  private:
  int _internal_holder_size() const;
  public:
  void clear_holder();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_holder(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_holder() const;
  void _internal_add_holder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_holder();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 holder(int index) const;
  void set_holder(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_holder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      holder() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_holder();

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Publishing publishing = 1;
  bool has_publishing() const;
  private:
  bool _internal_has_publishing() const;
  public:
  void clear_publishing();
  const ::Publishing& publishing() const;
  ::Publishing* release_publishing();
  ::Publishing* mutable_publishing();
  void set_allocated_publishing(::Publishing* publishing);
  private:
  const ::Publishing& _internal_publishing() const;
  ::Publishing* _internal_mutable_publishing();
  public:
  void unsafe_arena_set_allocated_publishing(
      ::Publishing* publishing);
  ::Publishing* unsafe_arena_release_publishing();

  // .Date borrow_date = 5;
  bool has_borrow_date() const;
  private:
  bool _internal_has_borrow_date() const;
  public:
  void clear_borrow_date();
  const ::Date& borrow_date() const;
  ::Date* release_borrow_date();
  ::Date* mutable_borrow_date();
  void set_allocated_borrow_date(::Date* borrow_date);
  private:
  const ::Date& _internal_borrow_date() const;
  ::Date* _internal_mutable_borrow_date();
  public:
  void unsafe_arena_set_allocated_borrow_date(
      ::Date* borrow_date);
  ::Date* unsafe_arena_release_borrow_date();

  // .Date return_date = 6;
  bool has_return_date() const;
  private:
  bool _internal_has_return_date() const;
  public:
  void clear_return_date();
  const ::Date& return_date() const;
  ::Date* release_return_date();
  ::Date* mutable_return_date();
  void set_allocated_return_date(::Date* return_date);
  private:
  const ::Date& _internal_return_date() const;
  ::Date* _internal_mutable_return_date();
  public:
  void unsafe_arena_set_allocated_return_date(
      ::Date* return_date);
  ::Date* unsafe_arena_release_return_date();

  // uint32 year = 3;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Book)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > holder_;
  mutable std::atomic<int> _holder_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Publishing* publishing_;
  ::Date* borrow_date_;
  ::Date* return_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telephone_5fbook_2eproto;
};
// -------------------------------------------------------------------

class Library PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Library) */ {
 public:
  inline Library() : Library(nullptr) {}
  virtual ~Library();
  explicit constexpr Library(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Library(const Library& from);
  Library(Library&& from) noexcept
    : Library() {
    *this = ::std::move(from);
  }

  inline Library& operator=(const Library& from) {
    CopyFrom(from);
    return *this;
  }
  inline Library& operator=(Library&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Library& default_instance() {
    return *internal_default_instance();
  }
  static inline const Library* internal_default_instance() {
    return reinterpret_cast<const Library*>(
               &_Library_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Library& a, Library& b) {
    a.Swap(&b);
  }
  inline void Swap(Library* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Library* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Library* New() const final {
    return CreateMaybeMessage<Library>(nullptr);
  }

  Library* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Library>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Library& from);
  void MergeFrom(const Library& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Library* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Library";
  }
  protected:
  explicit Library(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telephone_5fbook_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBooksFieldNumber = 1,
    kReaderFieldNumber = 2,
  };
  // repeated .Book books = 1;
  int books_size() const;
  private:
  int _internal_books_size() const;
  public:
  void clear_books();
  ::Book* mutable_books(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >*
      mutable_books();
  private:
  const ::Book& _internal_books(int index) const;
  ::Book* _internal_add_books();
  public:
  const ::Book& books(int index) const;
  ::Book* add_books();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >&
      books() const;

  // repeated .User reader = 2;
  int reader_size() const;
  private:
  int _internal_reader_size() const;
  public:
  void clear_reader();
  ::User* mutable_reader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
      mutable_reader();
  private:
  const ::User& _internal_reader(int index) const;
  ::User* _internal_add_reader();
  public:
  const ::User& reader(int index) const;
  ::User* add_reader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
      reader() const;

  // @@protoc_insertion_point(class_scope:Library)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book > books_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User > reader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telephone_5fbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Author

// string first_name = 1;
inline void Author::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& Author::first_name() const {
  // @@protoc_insertion_point(field_get:Author.first_name)
  return _internal_first_name();
}
inline void Author::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:Author.first_name)
}
inline std::string* Author::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:Author.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& Author::_internal_first_name() const {
  return first_name_.Get();
}
inline void Author::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Author::set_first_name(std::string&& value) {
  
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Author.first_name)
}
inline void Author::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Author.first_name)
}
inline void Author::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Author.first_name)
}
inline std::string* Author::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Author::release_first_name() {
  // @@protoc_insertion_point(field_release:Author.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Author::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Author.first_name)
}

// string last_name = 2;
inline void Author::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& Author::last_name() const {
  // @@protoc_insertion_point(field_get:Author.last_name)
  return _internal_last_name();
}
inline void Author::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:Author.last_name)
}
inline std::string* Author::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:Author.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& Author::_internal_last_name() const {
  return last_name_.Get();
}
inline void Author::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Author::set_last_name(std::string&& value) {
  
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Author.last_name)
}
inline void Author::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Author.last_name)
}
inline void Author::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Author.last_name)
}
inline std::string* Author::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Author::release_last_name() {
  // @@protoc_insertion_point(field_release:Author.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Author::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Author.last_name)
}

// uint32 birth_year = 3;
inline void Author::clear_birth_year() {
  birth_year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Author::_internal_birth_year() const {
  return birth_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Author::birth_year() const {
  // @@protoc_insertion_point(field_get:Author.birth_year)
  return _internal_birth_year();
}
inline void Author::_internal_set_birth_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  birth_year_ = value;
}
inline void Author::set_birth_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_birth_year(value);
  // @@protoc_insertion_point(field_set:Author.birth_year)
}

// -------------------------------------------------------------------

// Publishing

// string name = 1;
inline void Publishing::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Publishing::name() const {
  // @@protoc_insertion_point(field_get:Publishing.name)
  return _internal_name();
}
inline void Publishing::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Publishing.name)
}
inline std::string* Publishing::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Publishing.name)
  return _internal_mutable_name();
}
inline const std::string& Publishing::_internal_name() const {
  return name_.Get();
}
inline void Publishing::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Publishing::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Publishing.name)
}
inline void Publishing::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Publishing.name)
}
inline void Publishing::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Publishing.name)
}
inline std::string* Publishing::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Publishing::release_name() {
  // @@protoc_insertion_point(field_release:Publishing.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Publishing::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Publishing.name)
}

// string address = 2;
inline void Publishing::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Publishing::address() const {
  // @@protoc_insertion_point(field_get:Publishing.address)
  return _internal_address();
}
inline void Publishing::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:Publishing.address)
}
inline std::string* Publishing::mutable_address() {
  // @@protoc_insertion_point(field_mutable:Publishing.address)
  return _internal_mutable_address();
}
inline const std::string& Publishing::_internal_address() const {
  return address_.Get();
}
inline void Publishing::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Publishing::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Publishing.address)
}
inline void Publishing::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Publishing.address)
}
inline void Publishing::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Publishing.address)
}
inline std::string* Publishing::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Publishing::release_address() {
  // @@protoc_insertion_point(field_release:Publishing.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Publishing::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Publishing.address)
}

// -------------------------------------------------------------------

// Date

// uint32 year = 1;
inline void Date::clear_year() {
  year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Date::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Date::year() const {
  // @@protoc_insertion_point(field_get:Date.year)
  return _internal_year();
}
inline void Date::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  year_ = value;
}
inline void Date::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Date.year)
}

// uint32 month = 2;
inline void Date::clear_month() {
  month_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Date::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Date::month() const {
  // @@protoc_insertion_point(field_get:Date.month)
  return _internal_month();
}
inline void Date::_internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  month_ = value;
}
inline void Date::set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:Date.month)
}

// uint32 day = 3;
inline void Date::clear_day() {
  day_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Date::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Date::day() const {
  // @@protoc_insertion_point(field_get:Date.day)
  return _internal_day();
}
inline void Date::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  day_ = value;
}
inline void Date::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Date.day)
}

// -------------------------------------------------------------------

// User

// uint32 id = 1;
inline void User::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::id() const {
  // @@protoc_insertion_point(field_get:User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:User.id)
}

// string name = 2;
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:User.name)
}
inline void User::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// .Date registration_date = 3;
inline bool User::_internal_has_registration_date() const {
  return this != internal_default_instance() && registration_date_ != nullptr;
}
inline bool User::has_registration_date() const {
  return _internal_has_registration_date();
}
inline void User::clear_registration_date() {
  if (GetArena() == nullptr && registration_date_ != nullptr) {
    delete registration_date_;
  }
  registration_date_ = nullptr;
}
inline const ::Date& User::_internal_registration_date() const {
  const ::Date* p = registration_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& User::registration_date() const {
  // @@protoc_insertion_point(field_get:User.registration_date)
  return _internal_registration_date();
}
inline void User::unsafe_arena_set_allocated_registration_date(
    ::Date* registration_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registration_date_);
  }
  registration_date_ = registration_date;
  if (registration_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.registration_date)
}
inline ::Date* User::release_registration_date() {
  
  ::Date* temp = registration_date_;
  registration_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Date* User::unsafe_arena_release_registration_date() {
  // @@protoc_insertion_point(field_release:User.registration_date)
  
  ::Date* temp = registration_date_;
  registration_date_ = nullptr;
  return temp;
}
inline ::Date* User::_internal_mutable_registration_date() {
  
  if (registration_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArena());
    registration_date_ = p;
  }
  return registration_date_;
}
inline ::Date* User::mutable_registration_date() {
  // @@protoc_insertion_point(field_mutable:User.registration_date)
  return _internal_mutable_registration_date();
}
inline void User::set_allocated_registration_date(::Date* registration_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete registration_date_;
  }
  if (registration_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(registration_date);
    if (message_arena != submessage_arena) {
      registration_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registration_date, submessage_arena);
    }
    
  } else {
    
  }
  registration_date_ = registration_date;
  // @@protoc_insertion_point(field_set_allocated:User.registration_date)
}

// -------------------------------------------------------------------

// Book

// .Publishing publishing = 1;
inline bool Book::_internal_has_publishing() const {
  return this != internal_default_instance() && publishing_ != nullptr;
}
inline bool Book::has_publishing() const {
  return _internal_has_publishing();
}
inline void Book::clear_publishing() {
  if (GetArena() == nullptr && publishing_ != nullptr) {
    delete publishing_;
  }
  publishing_ = nullptr;
}
inline const ::Publishing& Book::_internal_publishing() const {
  const ::Publishing* p = publishing_;
  return p != nullptr ? *p : reinterpret_cast<const ::Publishing&>(
      ::_Publishing_default_instance_);
}
inline const ::Publishing& Book::publishing() const {
  // @@protoc_insertion_point(field_get:Book.publishing)
  return _internal_publishing();
}
inline void Book::unsafe_arena_set_allocated_publishing(
    ::Publishing* publishing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publishing_);
  }
  publishing_ = publishing;
  if (publishing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Book.publishing)
}
inline ::Publishing* Book::release_publishing() {
  
  ::Publishing* temp = publishing_;
  publishing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Publishing* Book::unsafe_arena_release_publishing() {
  // @@protoc_insertion_point(field_release:Book.publishing)
  
  ::Publishing* temp = publishing_;
  publishing_ = nullptr;
  return temp;
}
inline ::Publishing* Book::_internal_mutable_publishing() {
  
  if (publishing_ == nullptr) {
    auto* p = CreateMaybeMessage<::Publishing>(GetArena());
    publishing_ = p;
  }
  return publishing_;
}
inline ::Publishing* Book::mutable_publishing() {
  // @@protoc_insertion_point(field_mutable:Book.publishing)
  return _internal_mutable_publishing();
}
inline void Book::set_allocated_publishing(::Publishing* publishing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete publishing_;
  }
  if (publishing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(publishing);
    if (message_arena != submessage_arena) {
      publishing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publishing, submessage_arena);
    }
    
  } else {
    
  }
  publishing_ = publishing;
  // @@protoc_insertion_point(field_set_allocated:Book.publishing)
}

// repeated string authors = 2;
inline int Book::_internal_authors_size() const {
  return authors_.size();
}
inline int Book::authors_size() const {
  return _internal_authors_size();
}
inline void Book::clear_authors() {
  authors_.Clear();
}
inline std::string* Book::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:Book.authors)
  return _internal_add_authors();
}
inline const std::string& Book::_internal_authors(int index) const {
  return authors_.Get(index);
}
inline const std::string& Book::authors(int index) const {
  // @@protoc_insertion_point(field_get:Book.authors)
  return _internal_authors(index);
}
inline std::string* Book::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:Book.authors)
  return authors_.Mutable(index);
}
inline void Book::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Book.authors)
  authors_.Mutable(index)->assign(value);
}
inline void Book::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Book.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void Book::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Book.authors)
}
inline void Book::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Book.authors)
}
inline std::string* Book::_internal_add_authors() {
  return authors_.Add();
}
inline void Book::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Book.authors)
}
inline void Book::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Book.authors)
}
inline void Book::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Book.authors)
}
inline void Book::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Book.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Book::authors() const {
  // @@protoc_insertion_point(field_list:Book.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Book::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:Book.authors)
  return &authors_;
}

// uint32 year = 3;
inline void Book::clear_year() {
  year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Book::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Book::year() const {
  // @@protoc_insertion_point(field_get:Book.year)
  return _internal_year();
}
inline void Book::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  year_ = value;
}
inline void Book::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Book.year)
}

// string name = 4;
inline void Book::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Book::name() const {
  // @@protoc_insertion_point(field_get:Book.name)
  return _internal_name();
}
inline void Book::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Book.name)
}
inline std::string* Book::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Book.name)
  return _internal_mutable_name();
}
inline const std::string& Book::_internal_name() const {
  return name_.Get();
}
inline void Book::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Book::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Book.name)
}
inline void Book::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Book.name)
}
inline void Book::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Book.name)
}
inline std::string* Book::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Book::release_name() {
  // @@protoc_insertion_point(field_release:Book.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Book::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Book.name)
}

// .Date borrow_date = 5;
inline bool Book::_internal_has_borrow_date() const {
  return this != internal_default_instance() && borrow_date_ != nullptr;
}
inline bool Book::has_borrow_date() const {
  return _internal_has_borrow_date();
}
inline void Book::clear_borrow_date() {
  if (GetArena() == nullptr && borrow_date_ != nullptr) {
    delete borrow_date_;
  }
  borrow_date_ = nullptr;
}
inline const ::Date& Book::_internal_borrow_date() const {
  const ::Date* p = borrow_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& Book::borrow_date() const {
  // @@protoc_insertion_point(field_get:Book.borrow_date)
  return _internal_borrow_date();
}
inline void Book::unsafe_arena_set_allocated_borrow_date(
    ::Date* borrow_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(borrow_date_);
  }
  borrow_date_ = borrow_date;
  if (borrow_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Book.borrow_date)
}
inline ::Date* Book::release_borrow_date() {
  
  ::Date* temp = borrow_date_;
  borrow_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Date* Book::unsafe_arena_release_borrow_date() {
  // @@protoc_insertion_point(field_release:Book.borrow_date)
  
  ::Date* temp = borrow_date_;
  borrow_date_ = nullptr;
  return temp;
}
inline ::Date* Book::_internal_mutable_borrow_date() {
  
  if (borrow_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArena());
    borrow_date_ = p;
  }
  return borrow_date_;
}
inline ::Date* Book::mutable_borrow_date() {
  // @@protoc_insertion_point(field_mutable:Book.borrow_date)
  return _internal_mutable_borrow_date();
}
inline void Book::set_allocated_borrow_date(::Date* borrow_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete borrow_date_;
  }
  if (borrow_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(borrow_date);
    if (message_arena != submessage_arena) {
      borrow_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, borrow_date, submessage_arena);
    }
    
  } else {
    
  }
  borrow_date_ = borrow_date;
  // @@protoc_insertion_point(field_set_allocated:Book.borrow_date)
}

// .Date return_date = 6;
inline bool Book::_internal_has_return_date() const {
  return this != internal_default_instance() && return_date_ != nullptr;
}
inline bool Book::has_return_date() const {
  return _internal_has_return_date();
}
inline void Book::clear_return_date() {
  if (GetArena() == nullptr && return_date_ != nullptr) {
    delete return_date_;
  }
  return_date_ = nullptr;
}
inline const ::Date& Book::_internal_return_date() const {
  const ::Date* p = return_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& Book::return_date() const {
  // @@protoc_insertion_point(field_get:Book.return_date)
  return _internal_return_date();
}
inline void Book::unsafe_arena_set_allocated_return_date(
    ::Date* return_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(return_date_);
  }
  return_date_ = return_date;
  if (return_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Book.return_date)
}
inline ::Date* Book::release_return_date() {
  
  ::Date* temp = return_date_;
  return_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Date* Book::unsafe_arena_release_return_date() {
  // @@protoc_insertion_point(field_release:Book.return_date)
  
  ::Date* temp = return_date_;
  return_date_ = nullptr;
  return temp;
}
inline ::Date* Book::_internal_mutable_return_date() {
  
  if (return_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArena());
    return_date_ = p;
  }
  return return_date_;
}
inline ::Date* Book::mutable_return_date() {
  // @@protoc_insertion_point(field_mutable:Book.return_date)
  return _internal_mutable_return_date();
}
inline void Book::set_allocated_return_date(::Date* return_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete return_date_;
  }
  if (return_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(return_date);
    if (message_arena != submessage_arena) {
      return_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_date, submessage_arena);
    }
    
  } else {
    
  }
  return_date_ = return_date;
  // @@protoc_insertion_point(field_set_allocated:Book.return_date)
}

// repeated uint32 holder = 7;
inline int Book::_internal_holder_size() const {
  return holder_.size();
}
inline int Book::holder_size() const {
  return _internal_holder_size();
}
inline void Book::clear_holder() {
  holder_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Book::_internal_holder(int index) const {
  return holder_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Book::holder(int index) const {
  // @@protoc_insertion_point(field_get:Book.holder)
  return _internal_holder(index);
}
inline void Book::set_holder(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  holder_.Set(index, value);
  // @@protoc_insertion_point(field_set:Book.holder)
}
inline void Book::_internal_add_holder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  holder_.Add(value);
}
inline void Book::add_holder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_holder(value);
  // @@protoc_insertion_point(field_add:Book.holder)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Book::_internal_holder() const {
  return holder_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Book::holder() const {
  // @@protoc_insertion_point(field_list:Book.holder)
  return _internal_holder();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Book::_internal_mutable_holder() {
  return &holder_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Book::mutable_holder() {
  // @@protoc_insertion_point(field_mutable_list:Book.holder)
  return _internal_mutable_holder();
}

// -------------------------------------------------------------------

// Library

// repeated .Book books = 1;
inline int Library::_internal_books_size() const {
  return books_.size();
}
inline int Library::books_size() const {
  return _internal_books_size();
}
inline void Library::clear_books() {
  books_.Clear();
}
inline ::Book* Library::mutable_books(int index) {
  // @@protoc_insertion_point(field_mutable:Library.books)
  return books_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >*
Library::mutable_books() {
  // @@protoc_insertion_point(field_mutable_list:Library.books)
  return &books_;
}
inline const ::Book& Library::_internal_books(int index) const {
  return books_.Get(index);
}
inline const ::Book& Library::books(int index) const {
  // @@protoc_insertion_point(field_get:Library.books)
  return _internal_books(index);
}
inline ::Book* Library::_internal_add_books() {
  return books_.Add();
}
inline ::Book* Library::add_books() {
  // @@protoc_insertion_point(field_add:Library.books)
  return _internal_add_books();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >&
Library::books() const {
  // @@protoc_insertion_point(field_list:Library.books)
  return books_;
}

// repeated .User reader = 2;
inline int Library::_internal_reader_size() const {
  return reader_.size();
}
inline int Library::reader_size() const {
  return _internal_reader_size();
}
inline void Library::clear_reader() {
  reader_.Clear();
}
inline ::User* Library::mutable_reader(int index) {
  // @@protoc_insertion_point(field_mutable:Library.reader)
  return reader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
Library::mutable_reader() {
  // @@protoc_insertion_point(field_mutable_list:Library.reader)
  return &reader_;
}
inline const ::User& Library::_internal_reader(int index) const {
  return reader_.Get(index);
}
inline const ::User& Library::reader(int index) const {
  // @@protoc_insertion_point(field_get:Library.reader)
  return _internal_reader(index);
}
inline ::User* Library::_internal_add_reader() {
  return reader_.Add();
}
inline ::User* Library::add_reader() {
  // @@protoc_insertion_point(field_add:Library.reader)
  return _internal_add_reader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
Library::reader() const {
  // @@protoc_insertion_point(field_list:Library.reader)
  return reader_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telephone_5fbook_2eproto
